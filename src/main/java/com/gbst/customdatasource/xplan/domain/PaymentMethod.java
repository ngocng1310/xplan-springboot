//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.01.24 at 02:11:13 PM AEST 
//


package com.gbst.customdatasource.xplan.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PaymentMethod.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PaymentMethod">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Cash"/>
 *     &lt;enumeration value="Cheque"/>
 *     &lt;enumeration value="CreditCard"/>
 *     &lt;enumeration value="DirectDebit"/>
 *     &lt;enumeration value="DirectCredit"/>
 *     &lt;enumeration value="PayrollDeduction"/>
 *     &lt;enumeration value="RolloverFromSuperannuation"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "PaymentMethod")
@XmlEnum
public enum PaymentMethod {

    @XmlEnumValue("Cash")
    CASH("Cash"),
    @XmlEnumValue("Cheque")
    CHEQUE("Cheque"),
    @XmlEnumValue("CreditCard")
    CREDIT_CARD("CreditCard"),
    @XmlEnumValue("DirectDebit")
    DIRECT_DEBIT("DirectDebit"),
    @XmlEnumValue("DirectCredit")
    DIRECT_CREDIT("DirectCredit"),
    @XmlEnumValue("PayrollDeduction")
    PAYROLL_DEDUCTION("PayrollDeduction"),
    @XmlEnumValue("RolloverFromSuperannuation")
    ROLLOVER_FROM_SUPERANNUATION("RolloverFromSuperannuation");
    private final String value;

    PaymentMethod(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PaymentMethod fromValue(String v) {
        for (PaymentMethod c: PaymentMethod.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
