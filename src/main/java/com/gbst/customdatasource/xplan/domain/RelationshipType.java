//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.01.24 at 02:11:13 PM AEST 
//


package com.gbst.customdatasource.xplan.domain;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RelationshipType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RelationshipType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Parent"/>
 *     &lt;enumeration value="Partner"/>
 *     &lt;enumeration value="Spouse"/>
 *     &lt;enumeration value="Aunt"/>
 *     &lt;enumeration value="Child"/>
 *     &lt;enumeration value="Uncle"/>
 *     &lt;enumeration value="GrandChild"/>
 *     &lt;enumeration value="GrandParent"/>
 *     &lt;enumeration value="GreatGrandChild"/>
 *     &lt;enumeration value="GreatGrandParent"/>
 *     &lt;enumeration value="BusinessPartner"/>
 *     &lt;enumeration value="Beneficiary"/>
 *     &lt;enumeration value="Dependant"/>
 *     &lt;enumeration value="Director"/>
 *     &lt;enumeration value="Employee"/>
 *     &lt;enumeration value="Executor"/>
 *     &lt;enumeration value="ExPartner"/>
 *     &lt;enumeration value="ExSpouse"/>
 *     &lt;enumeration value="Family"/>
 *     &lt;enumeration value="Fiancee"/>
 *     &lt;enumeration value="Friend"/>
 *     &lt;enumeration value="KeyPerson"/>
 *     &lt;enumeration value="Nephew"/>
 *     &lt;enumeration value="Niece"/>
 *     &lt;enumeration value="PowerOfAttorney"/>
 *     &lt;enumeration value="Super"/>
 *     &lt;enumeration value="Trust"/>
 *     &lt;enumeration value="Trustee"/>
 *     &lt;enumeration value="Sibling"/>
 *     &lt;enumeration value="Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RelationshipType")
@XmlEnum
public enum RelationshipType {

    @XmlEnumValue("Parent")
    PARENT("Parent"),
    @XmlEnumValue("Partner")
    PARTNER("Partner"),
    @XmlEnumValue("Spouse")
    SPOUSE("Spouse"),
    @XmlEnumValue("Aunt")
    AUNT("Aunt"),
    @XmlEnumValue("Child")
    CHILD("Child"),
    @XmlEnumValue("Uncle")
    UNCLE("Uncle"),
    @XmlEnumValue("GrandChild")
    GRAND_CHILD("GrandChild"),
    @XmlEnumValue("GrandParent")
    GRAND_PARENT("GrandParent"),
    @XmlEnumValue("GreatGrandChild")
    GREAT_GRAND_CHILD("GreatGrandChild"),
    @XmlEnumValue("GreatGrandParent")
    GREAT_GRAND_PARENT("GreatGrandParent"),
    @XmlEnumValue("BusinessPartner")
    BUSINESS_PARTNER("BusinessPartner"),
    @XmlEnumValue("Beneficiary")
    BENEFICIARY("Beneficiary"),
    @XmlEnumValue("Dependant")
    DEPENDANT("Dependant"),
    @XmlEnumValue("Director")
    DIRECTOR("Director"),
    @XmlEnumValue("Employee")
    EMPLOYEE("Employee"),
    @XmlEnumValue("Executor")
    EXECUTOR("Executor"),
    @XmlEnumValue("ExPartner")
    EX_PARTNER("ExPartner"),
    @XmlEnumValue("ExSpouse")
    EX_SPOUSE("ExSpouse"),
    @XmlEnumValue("Family")
    FAMILY("Family"),
    @XmlEnumValue("Fiancee")
    FIANCEE("Fiancee"),
    @XmlEnumValue("Friend")
    FRIEND("Friend"),
    @XmlEnumValue("KeyPerson")
    KEY_PERSON("KeyPerson"),
    @XmlEnumValue("Nephew")
    NEPHEW("Nephew"),
    @XmlEnumValue("Niece")
    NIECE("Niece"),
    @XmlEnumValue("PowerOfAttorney")
    POWER_OF_ATTORNEY("PowerOfAttorney"),
    @XmlEnumValue("Super")
    SUPER("Super"),
    @XmlEnumValue("Trust")
    TRUST("Trust"),
    @XmlEnumValue("Trustee")
    TRUSTEE("Trustee"),
    @XmlEnumValue("Sibling")
    SIBLING("Sibling"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    RelationshipType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RelationshipType fromValue(String v) {
        for (RelationshipType c: RelationshipType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
